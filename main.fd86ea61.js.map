{"version":3,"sources":["scripts/main.js"],"names":["board","score","gameRunning","rows","columns","start","document","querySelector","startText","gameOverMessage","resetGame","stopGame","setGame","classList","remove","add","innerText","getElementById","innerHTML","checkForGameWin","r","c","tile","toString","contains","gameWin","initializeBoard","Array","from","length","fill","boardElement","createElement","id","updateTile","append","setInitialTiles","checkForGameLoss","count","i","hasEmptyTile","found","Math","floor","random","canMergeTiles","gameLose","isGameLost","currentValue","setTwo","randomNumber","tileValue","num","value","filterZero","row","filter","slide","newRow","push","slideLeft","canSlideLeft","slideRight","canSlideRight","reverse","slideUp","canSlideUp","slideDown","canSlideDown","window","onload","addEventListener","e","code"],"mappings":"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","file":"main.fd86ea61.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nlet board;\nlet score = 0;\nlet gameRunning = false;\nconst rows = 4;\nconst columns = 4;\nconst start = document.querySelector('.start');\nconst startText = document.querySelector('.message_start');\nconst gameOverMessage = document.querySelector('.message_lose');\n\nwindow.onload = function() {\n  initializeBoard();\n\n  start.addEventListener('click', () => {\n    if (!gameRunning || isGameLost()) {\n      gameOverMessage.classList.add('hidden');\n      score = 0;\n      document.getElementById('score').innerText = score;\n\n      setGame();\n      gameRunning = true;\n\n      start.classList.remove('start');\n      start.classList.add('restart');\n      start.innerText = 'Restart';\n      startText.classList.remove('message_start');\n      startText.classList.add('hidden');\n\n      checkForGameWin();\n    } else {\n      resetGame();\n    }\n  });\n};\n\nfunction resetGame() {\n  stopGame();\n  setGame();\n  gameRunning = true;\n  startText.classList.remove('message_start');\n  startText.classList.add('hidden');\n  start.innerText = 'Restart';\n  score = 0;\n  document.getElementById('score').innerText = score;\n}\n\nfunction stopGame() {\n  const boardElement = document.getElementById('board');\n\n  boardElement.innerHTML = '';\n  score = 0;\n  document.getElementById('score').innerText = score;\n}\n\nfunction checkForGameWin() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n\n      if (tile.classList.contains('x2048')) {\n        gameWin();\n\n        return;\n      }\n    }\n  }\n}\n\nfunction gameWin() {\n  startText.innerText = 'Winner! Congrats! You did it!';\n}\n\nfunction initializeBoard() {\n  board = Array.from({ length: rows }, () => Array(columns).fill(0));\n\n  const boardElement = document.getElementById('board');\n\n  boardElement.innerHTML = '';\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const tile = document.createElement('div');\n\n      tile.id = r.toString() + '-' + c.toString();\n\n      const num = board[r][c];\n\n      updateTile(tile, num);\n\n      boardElement.append(tile);\n    }\n  }\n}\n\nfunction setGame() {\n  initializeBoard();\n\n  setInitialTiles(2);\n\n  checkForGameLoss();\n}\n\nfunction setInitialTiles(count) {\n  for (let i = 0; i < count; i++) {\n    if (!hasEmptyTile()) {\n      return;\n    }\n\n    let found = false;\n\n    while (!found) {\n      const r = Math.floor(Math.random() * rows);\n      const c = Math.floor(Math.random() * columns);\n\n      if (board[r][c] === 0) {\n        board[r][c] = 2;\n\n        const tile = document.getElementById(r.toString() + '-' + c.toString());\n\n        tile.innerText = '2';\n        tile.classList.add('x2');\n        found = true;\n      }\n    }\n  }\n}\n\nfunction checkForGameLoss() {\n  if (!hasEmptyTile() && !canMergeTiles()) {\n    gameLose();\n  }\n}\n\nfunction isGameLost() {\n  return !hasEmptyTile() && !canMergeTiles();\n}\n\nfunction hasEmptyTile() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction canMergeTiles() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const currentValue = board[r][c];\n\n      if (\n        (r > 0 && board[r - 1][c] === currentValue)\n        || (r < rows - 1 && board[r + 1][c] === currentValue)\n        || (c > 0 && board[r][c - 1] === currentValue)\n        || (c < columns - 1 && board[r][c + 1] === currentValue)\n      ) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction setTwo() {\n  if (!gameRunning) {\n    return;\n  }\n\n  if (!hasEmptyTile()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n\n    if (board[r][c] === 0) {\n      const randomNumber = Math.random();\n\n      const tileValue = randomNumber < 0.9 ? 2 : 4;\n\n      board[r][c] = tileValue;\n\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n\n      tile.innerText = tileValue.toString();\n      tile.classList.add('x' + tileValue.toString());\n      found = true;\n    }\n  }\n}\n\nfunction updateTile(tile, num) {\n  tile.innerText = '';\n  tile.classList.value = '';\n  tile.classList.add('tile');\n\n  if (num > 0) {\n    tile.innerText = num;\n\n    if (num <= 4096) {\n      tile.classList.add('x' + num.toString());\n    } else {\n      tile.classList.add('x8192');\n    }\n  }\n}\n\ndocument.addEventListener('keyup', (e) => {\n  if (e.code === 'ArrowLeft') {\n    slideLeft();\n  } else if (e.code === 'ArrowRight') {\n    slideRight();\n  } else if (e.code === 'ArrowUp') {\n    slideUp();\n  } else if (e.code === 'ArrowDown') {\n    slideDown();\n  }\n  document.getElementById('score').innerText = score;\n});\n\nfunction filterZero(row) {\n  return row.filter((num) => num !== 0);\n}\n\nfunction slide(row) {\n  const newRow = filterZero(row);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n    }\n  }\n\n  while (newRow.length < columns) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction gameLose() {\n  gameOverMessage.classList.remove('hidden');\n  gameRunning = false;\n}\n\nfunction slideLeft() {\n  if (canSlideLeft()) {\n    for (let r = 0; r < rows; r++) {\n      let row = board[r];\n\n      row = slide(row);\n\n      board[r] = row;\n\n      for (let c = 0; c < columns; c++) {\n        const tile = document.getElementById(r.toString() + '-' + c.toString());\n        const num = board[r][c];\n\n        updateTile(tile, num);\n      }\n    }\n\n    setTwo();\n    checkForGameLoss();\n  }\n}\n\nfunction slideRight() {\n  if (canSlideRight()) {\n    for (let r = 0; r < rows; r++) {\n      let row = board[r];\n\n      row.reverse();\n\n      row = slide(row);\n\n      row.reverse();\n\n      board[r] = row;\n\n      for (let c = 0; c < columns; c++) {\n        const tile = document.getElementById(r.toString() + '-' + c.toString());\n        const num = board[r][c];\n\n        updateTile(tile, num);\n      }\n    }\n\n    setTwo();\n    checkForGameLoss();\n  }\n}\n\nfunction slideUp() {\n  if (canSlideUp()) {\n    for (let c = 0; c < columns; c++) {\n      let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n      row = slide(row);\n\n      for (let r = 0; r < columns; r++) {\n        board[r][c] = row[r];\n\n        const tile = document.getElementById(r.toString() + '-' + c.toString());\n        const num = board[r][c];\n\n        updateTile(tile, num);\n      }\n    }\n\n    setTwo();\n    checkForGameLoss();\n  }\n}\n\nfunction slideDown() {\n  if (canSlideDown()) {\n    for (let c = 0; c < columns; c++) {\n      let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n      row.reverse();\n\n      row = slide(row);\n\n      row.reverse();\n\n      for (let r = 0; r < columns; r++) {\n        board[r][c] = row[r];\n\n        const tile = document.getElementById(r.toString() + '-' + c.toString());\n        const num = board[r][c];\n\n        updateTile(tile, num);\n      }\n    }\n\n    setTwo();\n    checkForGameLoss();\n  }\n}\n\nfunction canSlideLeft() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const currentValue = board[r][c];\n\n      if (currentValue !== 0) {\n        if (c > 0 && (board[r][c - 1] === 0\n          || board[r][c - 1] === currentValue)) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction canSlideRight() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const currentValue = board[r][c];\n\n      if (currentValue !== 0) {\n        if (c < columns - 1 && (board[r][c + 1] === 0\n          || board[r][c + 1] === currentValue)) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction canSlideUp() {\n  for (let c = 0; c < columns; c++) {\n    for (let r = 0; r < rows; r++) {\n      const currentValue = board[r][c];\n\n      if (currentValue !== 0) {\n        if (r > 0 && (board[r - 1][c] === 0\n          || board[r - 1][c] === currentValue)) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction canSlideDown() {\n  for (let c = 0; c < columns; c++) {\n    for (let r = rows - 1; r >= 0; r--) {\n      const currentValue = board[r][c];\n\n      if (currentValue !== 0) {\n        if (r < rows - 1 && (board[r + 1][c] === 0\n          || board[r + 1][c] === currentValue)) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n}\n"]}